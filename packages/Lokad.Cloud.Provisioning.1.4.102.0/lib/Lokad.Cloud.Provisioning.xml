<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lokad.Cloud.Provisioning</name>
    </assembly>
    <members>
        <member name="T:GlobalAssemblyInfo">
            <summary>
             Assembly information class that is shared between all projects
            </summary>
        </member>
        <member name="T:Lokad.Cloud.Provisioning.Internal.AzureXml">
            <summary>
            <c>Xml</c> Traversing and factory helpers for the Windows Azure Management API schema.
            </summary>
        </member>
        <member name="T:Lokad.Cloud.Provisioning.Instrumentation.Events.ProvisioningOperationRetriedEvent">
            <summary>
            Raised whenever a provisioning operation is retried.
            Useful for analyzing retry policy behavior.
            </summary>
        </member>
        <member name="T:Lokad.Cloud.Provisioning.Internal.RetryPolicies">
            <summary>
            Azure management api retry policies for corner-situation and server errors.
            </summary>
        </member>
        <member name="M:Lokad.Cloud.Provisioning.Internal.RetryPolicies.#ctor(Lokad.Cloud.Provisioning.Instrumentation.ICloudProvisioningObserver)">
            <param name="observer">Can be <see langword="null"/>.</param>
        </member>
        <member name="T:Lokad.Cloud.Provisioning.Internal.ServiceConfigXml">
            <summary>
            <c>Xml</c> Traversing and factory helpers for the Windows Azure service configuration schema.
            </summary>
        </member>
        <member name="M:Lokad.Cloud.Provisioning.Internal.TaskExtensions.ContinuePropagateWith``2(System.Threading.Tasks.Task{``1},System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.CancellationToken,System.Action{System.Threading.Tasks.Task{``1}})">
            <remarks>Only put short operations in this continuation, or do them async, as the continuation is executed synchronously.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Provisioning.Internal.HttpClientExtensions.GetXmlAsync``1(System.Net.Http.HttpClient,System.String,System.Threading.CancellationToken,Lokad.Cloud.Provisioning.Internal.RetryPolicies.RetryPolicy,System.Action{System.Xml.Linq.XDocument,System.Threading.Tasks.TaskCompletionSource{``0}})">
            <remarks>Only put short operations in the "handle" continuation, or do them async, because it is executed synchronously.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Provisioning.Internal.HttpClientExtensions.PostXmlAsync``1(System.Net.Http.HttpClient,System.String,System.Xml.Linq.XDocument,System.Threading.CancellationToken,Lokad.Cloud.Provisioning.Internal.RetryPolicies.RetryPolicy,System.Action{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.TaskCompletionSource{``0}})">
            <remarks>Only put short operations in the "handle" continuation, or do them async, because it is executed synchronously.</remarks>
        </member>
        <member name="M:Lokad.Cloud.Provisioning.Internal.HttpClientExtensions.SendXmlAsync``1(System.Net.Http.HttpClient,System.Func{System.Net.Http.HttpRequestMessage},System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.CancellationToken,Lokad.Cloud.Provisioning.Internal.RetryPolicies.ShouldRetry,System.Int32,System.Action{System.Net.Http.HttpResponseMessage})">
            <remarks>Only put short operations in the "handle" continuation, or do them async, because it is executed synchronously.</remarks>
        </member>
        <member name="T:Lokad.Cloud.Provisioning.AzureCurrentDeployment">
            <summary>
            <para>
            Due to a an Azure runtime design decision it is hard to discover the absolute
            identity of the currently running hosted service instance (self; who-am-i).
            Yet the absolute identity is required to be able to manage it using the
            Azure management API, e.g. to automatically provision more worker instances on high demand.
            </para>
            <para>
            This class implements an async way to discover the absolute identity of the current
            hosted service and deployment. A successful discovery will be cached, subsequent
            calls to <see cref="M:Lokad.Cloud.Provisioning.AzureCurrentDeployment.Discover(System.Threading.CancellationToken)"/> will return the result immediately, or retry
            if the previous attempt had failed.
            </para>
            </summary>
        </member>
        <member name="T:Lokad.Cloud.Provisioning.Instrumentation.CloudProvisioningInstrumentationSubject">
            <summary>
            Cloud storage observer that implements a hot Rx Observable, forwarding all events synchronously
            (similar to Rx's FastSubject). Use this class if you want an easy way to observe Lokad.Cloud.Provisioning
            using Rx. Alternatively you can implement your own storage observer instead, or not use any observers at all.
            </summary>
        </member>
        <member name="M:Lokad.Cloud.Provisioning.Instrumentation.CloudProvisioningInstrumentationSubject.#ctor(System.IObserver{Lokad.Cloud.Provisioning.Instrumentation.Events.ICloudProvisioningEvent}[])">
            <param name="fixedObservers">Optional externally managed fixed observers, will neither be completed nor disposed by this class.</param>
        </member>
    </members>
</doc>
